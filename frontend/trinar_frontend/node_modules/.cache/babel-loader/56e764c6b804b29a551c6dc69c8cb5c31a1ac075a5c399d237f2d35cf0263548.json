{"ast":null,"code":"var _s = $RefreshSig$();\n// frontend/trinar_frontend/src/components/RequestPasswordReset.js\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nconst RequestPasswordReset = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const csrfToken = Cookies.get('csrftoken'); // Obtém o token CSRF do cookie\n\n      const response = await axios.post('http://localhost:8000/api/password-reset/', {\n        email\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': csrfToken // Adiciona o token CSRF no cabeçalho\n        },\n        withCredentials: true // Garante o envio de cookies\n      });\n      console.log('Response data:', response.data); // Adicione este log\n      setMessage(response.data.message);\n      setError('');\n    } catch (err) {\n      setError('Erro ao solicitar redefinição de senha. Verifique o email e tente novamente.');\n      setMessage('');\n    }\n  };\n};\n_s(RequestPasswordReset, \"+oC6IIAeBPUO7WCSW4CSxdFqDlU=\");\n_c = RequestPasswordReset;\nexport default RequestPasswordReset;\nvar _c;\n$RefreshReg$(_c, \"RequestPasswordReset\");","map":{"version":3,"names":["React","useState","axios","Cookies","RequestPasswordReset","_s","email","setEmail","message","setMessage","error","setError","handleSubmit","e","preventDefault","csrfToken","get","response","post","headers","withCredentials","console","log","data","err","_c","$RefreshReg$"],"sources":["/home/junior-silva/Trinar/frontend/trinar_frontend/src/components/RequestPasswordReset.js"],"sourcesContent":["// frontend/trinar_frontend/src/components/RequestPasswordReset.js\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\n\nconst RequestPasswordReset = () => {\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      const csrfToken = Cookies.get('csrftoken'); // Obtém o token CSRF do cookie\n\n      const response = await axios.post(\n        'http://localhost:8000/api/password-reset/',\n        { email },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            'X-CSRFToken': csrfToken, // Adiciona o token CSRF no cabeçalho\n          },\n          withCredentials: true, // Garante o envio de cookies\n        }\n      );\n      console.log('Response data:', response.data); // Adicione este log\n      setMessage(response.data.message);\n      setError('');\n    } catch (err) {\n      setError('Erro ao solicitar redefinição de senha. Verifique o email e tente novamente.');\n      setMessage('');\n    }\n  };\n\n  \n};\n\nexport default RequestPasswordReset;\n"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,WAAW;AAE/B,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMW,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI;MACF,MAAMC,SAAS,GAAGZ,OAAO,CAACa,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;;MAE5C,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAC/B,2CAA2C,EAC3C;QAAEZ;MAAM,CAAC,EACT;QACEa,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,aAAa,EAAEJ,SAAS,CAAE;QAC5B,CAAC;QACDK,eAAe,EAAE,IAAI,CAAE;MACzB,CACF,CAAC;MACDC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC;MAC9Cd,UAAU,CAACQ,QAAQ,CAACM,IAAI,CAACf,OAAO,CAAC;MACjCG,QAAQ,CAAC,EAAE,CAAC;IACd,CAAC,CAAC,OAAOa,GAAG,EAAE;MACZb,QAAQ,CAAC,8EAA8E,CAAC;MACxFF,UAAU,CAAC,EAAE,CAAC;IAChB;EACF,CAAC;AAGH,CAAC;AAACJ,EAAA,CAhCID,oBAAoB;AAAAqB,EAAA,GAApBrB,oBAAoB;AAkC1B,eAAeA,oBAAoB;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}